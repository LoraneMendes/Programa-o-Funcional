-- Loraine F. Mendes

{--1. Usando List Comprehension escreva uma função, chamada divisoresden, que devolva uma 
lista dos divisores de um número dado.--}
divisoresden :: Int -> [Int]
divisoresden n = [x | x<-[1..n], n`mod`x==0]

{--2. Usando  List Comprehension  escreva  uma  função,  chamada  contaCaractere,  que  conte  a 
ocorrência de um caractere específico, em uma string dada. --}
contaCaractere = length (filter (== 'X') "Dever X de haskell X contar X")

{--3. Usando List Comprehension escreva uma função, chamada dobroNaoNegativo, que devolve 
o dobro dos valores dos elementos não negativos da lista de inteiros dada. --}
dobroNaoNegativo :: [Integer] -> [Integer]
dobroNaoNegativo xs = fst $ foldr (\x (acc, bool) ->
                                  ((if bool then 2 * x else x) : acc,
                                   not bool)) ([], False) xs

{--4. Usando List Comprehension escreva uma função, chamada pitagoras, que devolva uma lista 
de triplas, não repetidas, contendo os lados dos triângulos retângulos possíveis de serem 
construídos por inteiros entre 1 e um número inteiro dado. --}
pitagoras   :: Int -> [(Int, Int, Int)]
pitagoras a = [(x, y, z) | (x, y, z) <- comb a, x ^ 2 + y ^ 2 == z ^2]

comb   :: Int -> [(Int, Int, Int)]
comb a = [(x, y, z) | x <- [1..a], y <- [1..a], z <- [1..a]]

{--5. Números  perfeitos  são  aqueles  cuja  soma  dos  seus  divisores  é  igual  ao  próprio  número. 
Usando List Comprehension escreva uma função, chamada numerosPerfeitos, que devolva 
uma lista contendo todos os números perfeitos menores que um número dado. Lembre-se 
que você já tem uma função que devolve uma lista dos divisores de um número dado. --}
numerosPerfeitos   :: Int -> [Int]
numerosPerfeitos a = [x | x <- [1..a], sum(init (fact x)) == x]
fact :: Int -> [Int]
fact a = [x | x <- [1..a], a `mod` x == 0]

{--6. Usando List Comprehension escreva uma função, chamada produtoEscalar, que devolva o 
produto escalar entre duas listas de inteiros. Lembre-se, existem as funções fst, snd e zip no 
prelude que podem ser úteis. --}
produtoEscalar       :: [Int] -> [Int] -> Int
produtoEscalar xs ys = sum [k * v | (k, v) <- zip xs ys]

{--7. Usando  List Comprehension  escreva  uma  função,  chamada  primeirosPrimos,  que  devolva  uma lista contendo os n primeiros números primos a partir do número 2. --}
fatorial :: Int -> [Int]
fatorial n = [x | x <- [1..n], n `mod` x == 0]
primo :: Int -> Bool
primo n = fatorial n == [1,n]
primeirosPrimos :: Int -> [Int]
primeirosPrimos n = [x | x <- [2..n], primo x]

{--8. Usando  List Comprehension  escreva  uma  função,  chamada  paresOrdenados,  que  devolva 
uma  lista  de  par  ordenados  contendo  uma  potência  de  2  e  uma  potência  de  3  até  um determinado número dado. Observe que estes números podem ser bem grandes. --}

main = do
  putStrLn $ "1: entrada: 10, resultado:" ++ show(divisoresden 10)
  putStrLn $ "2: entrada: 'Dever X de haskell X contar X', resultado:" ++ show(contaCaractere)
  putStrLn $ "3: entrada: [1,2,3,4,5], resultado:" ++ show(dobroNaoNegativo [1,2,3,4,5])
  putStrLn $ "4: entrada: 7, resultado:" ++ show(pitagoras 5)
  putStrLn $ "5: entrada: 600, resultado: " ++ show(numerosPerfeitos 600)
  putStrLn $ "6: entrada: [1,2,3][4,5,6], resultado: " ++ show(produtoEscalar [1,2,3][4,5,6])
  putStrLn $ "7: entrada: 600, resultado: " ++ show(primeirosPrimos 40)
